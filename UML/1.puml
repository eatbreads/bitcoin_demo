@startuml Rust 报错排查流程图
skinparam backgroundColor #fdf6e3
skinparam ArrowColor #636e72
skinparam RoundCorner 15
skinparam defaultTextAlignment center
skinparam shadowing true

start
:编译时遇到错误；
if (是否是生命周期错误\n或类型不匹配?) then (是)
  :检查依赖版本；
  :确认 crate 是否过旧；
  if (旧 crate 不兼容) then (是)
    :更新依赖版本或替代库；
  else
    :尝试用 ? 运算符\n处理 Result；
  endif
else (不是)
  :检查是否为模块导入问题；
  :检查 use / mod 是否正确；
endif
:问题仍然存在？;
if (是) then
  :换新目录重新建项目；
  :清理缓存和 target 文件夹；
endif
stop
@enduml



助教老师们好,今天我们小组将为演示一个完全基于Rust语言开发的区块链项目。这个项目实现了区块链的核心功能，包括工作量证明机制、数字钱包管理、交易处理和UTXO模型。



首先，我们来创建三个数字钱包。每个钱包都会生成一对公私钥，用于数字签名和地址生成。

执行命令时 ：正在创建第一个钱包,钱包地址为这一串,这将作为我们的君昊用户。

然后创建第二个钱包，这是君婷的钱包。

等待第三个钱包创建完成，这是周毅的钱包。

现在我们创建创世区块链，并将初始奖励发放给君昊。创世区块是区块链的第一个区块，包含初始的Coinbase交易。

系统正在进行工作量证明计算，寻找满足难度要求的Nonce值...可以看到，经过1,068,095次尝试后找到了有效哈希，区块哈希以0000开头，满足我们设定的难度要求。君昊获得了10个币的创世奖励。

让我们查看当前的区块链状态。可以看到创世区块的详细信息，包括时间戳、交易数量、Nonce值和哈希值。

验证各个钱包的初始余额。君昊有10个币，君婷和周毅的余额为0，这符合我们的预期。

现在进行第一笔交易，君昊向君婷发送5个币。系统会创建一个新的交易，包含输入和输出。

交易需要通过挖矿来确认。系统创建了一个新区块，包含Coinbase奖励交易和我们的转账交易。经过2,131,985次计算找到了有效Nonce，新区块被添加到链上。

交易确认后，君昊的余额变为15币（原有10币-转出5币+挖矿奖励10币），君婷获得了5币。

继续演示，君婷向周毅发送3个币。这次挖矿过程相对较快，只需要366,004次尝试就找到了有效哈希。

所有交易完成后，君昊有15币，君婷有12币（5币-3币+10币挖矿奖励），周毅有3币。总供应量为30币，符合经济模型。

最后查看完整的区块链，现在包含3个区块。每个区块都包含详细的交易信息，可以看到完整的资金流向和数字签名验证。

这个项目展示了现代区块链的核心技术：


工作量证明算法 ：采用SHA-256哈希算法，可调节挖矿难度
数字签名验证 ：确保交易安全性和不可篡改性
UTXO模型 ：未花费交易输出模型，与比特币架构一致
Merkle树结构 ：高效验证交易完整性
持久化存储 ：使用Sled数据库存储区块链数据

项目还支持UTXO索引重建和网络节点功能，可以构建完整的区块链网络。


通过这个演示，我们看到了一个完整的区块链系统从创建到交易的全过程。这个项目不仅实现了区块链的核心功能，还展示了Rust语言在系统编程中的强大能力。感谢观看！